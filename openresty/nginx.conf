events {
    worker_connections 1024;
}

http {
    server {
        listen 80;
        listen 443 ssl;
        http2 on;
        server_name localhost  127.0.0.1;

        # set up SSL/TLS
        ssl_certificate /usr/local/openresty/nginx/conf/ssl/localhost+2.pem;
        ssl_certificate_key /usr/local/openresty/nginx/conf/ssl/localhost+2-key.pem;
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers HIGH:!aNULL:!MD5;
        ssl_prefer_server_ciphers on;

        # Docker DNS resolver
        resolver 127.0.0.11 ipv6=off;

        # handle serving frontend (placeholder for now)
        location = / {
            default_type text/plain;
            return 200 "Static frontend placeholder\n";
        }

        location /urls/ {
            proxy_pass http://envoy:10000;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_http_version 1.1;
        }

        location /analytics/ {
            proxy_pass http://envoy:10000;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_http_version 1.1;
        }

        location ~ ^/([^/]+)$ {
    set $shortCode $1;

    access_by_lua_block {
        ngx.log(ngx.INFO, "Short code visit: ", ngx.var.shortCode)

        local shortCode = ngx.var.shortCode
        local http = require "resty.http"
        local httpc = http.new()

        -- Run in the background to avoid blocking the main request
        ngx.timer.at(0, function()
            local analytics_url = string.format("http://envoy:10000/analytics/api/v1/%s/visit/", shortCode)
            local res, err = httpc:request_uri(analytics_url, {method = "PATCH"})

            if not res then
                ngx.log(ngx.ERR, "Failed to send analytics: ", err)
            else
                ngx.log(ngx.INFO, "Analytics sent, status: ", res.status)
            end
        end)
    }

    # Continue with the regular request
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_http_version 1.1;
    rewrite ^/(.*)$ /urls/api/v1/$1/redirect break;
    proxy_pass http://envoy:10000;
}
    }
}