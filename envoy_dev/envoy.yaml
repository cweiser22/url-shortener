static_resources:
  listeners:
    - name: listener_0
      address:
        socket_address: { address: 0.0.0.0, port_value: 10000 }
      filter_chains:
        - filters:
            - name: envoy.filters.network.http_connection_manager
              typed_config:
                "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
                stat_prefix: ingress_http
                access_log:
                  - name: envoy.access_loggers.stdout
                    typed_config:
                      "@type": type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog
                      path: "/dev/stdout"
                      log_format:
                        text_format: "[%START_TIME%] %RESPONSE_CODE% %REQ(:METHOD)% %REQ(X-ENVOY-ORIGINAL-PATH?:PATH)% %BYTES_RECEIVED% %BYTES_SENT% %DURATION%\n"
                route_config:
                  name: local_route
                  virtual_hosts:
                    - name: backend
                      domains: ["*"]
                      routes:
                        - match: { prefix: "/urls" }
                          route: { cluster: urls_service_cluster }
                http_filters:
                  - name: envoy.filters.http.router
                    typed_config:
                      "@type": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router

  clusters:
    #- name: analytics_producer_cluster
    #  connect_timeout: 5s
    #  load_assignment:
    #    cluster_name: analytics_producer_cluster
    #    endpoints:
    #      - lb_endpoints:
    #          - endpoint:
    #              address:
    #                socket_address: { address: analytics-producer, port_value: 80 }
    #  type: STRICT_DNS
    #  lb_policy: ROUND_ROBIN

    - name: urls_service_cluster
      connect_timeout: 5s
      load_assignment:
        cluster_name: urls_service_cluster
        endpoints:
          - lb_endpoints:
              - endpoint:
                  address:
                    socket_address: { address: urls-service, port_value: 80 }
      type: STRICT_DNS
      lb_policy: ROUND_ROBIN
