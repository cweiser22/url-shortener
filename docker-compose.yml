services:
  mongodb:
    image: mongo:6.0
    networks:
      - url-dev-network
    volumes:
      - mongodb-data:/data/db

  urls-service:
    build: urls_service
    command: ['uvicorn', 'app.main:app', '--host', '0.0.0.0', '--port', '80', '--reload', '--log-level', 'info']
    volumes:
      - ./urls_service:/app
    depends_on:
      - mongodb
    deploy:
      replicas: 3
    networks:
      - url-dev-network
    env_file:
      - urls_service/.env.local
    expose:
      - "80"

  analytics-producer:
    deploy:
      replicas: 3
    build:
      dockerfile: producer.Dockerfile
      context: ./new_analytics_service
    depends_on:
      - postgres
      - redis
    networks:
      - url-dev-network
    volumes:
      - ./new_analytics_service:/app
    env_file:
      - new_analytics_service/.env.local
    command: ['/usr/local/bin/air', '--build.cmd', 'go build -o main /app/cmd/producer/main.go', "--build.bin", "/app/main" ]

  analytics-consumer:
    deploy:
      replicas: 3
    build:
      dockerfile: consumer.Dockerfile
      context: ./new_analytics_service
    depends_on:
      - postgres
      - redis
    networks:
      - url-dev-network
    env_file:
      - new_analytics_service/.env.local
    command: ["/usr/local/bin/air", "--build.cmd", "go build -o main ./cmd/consumer/main.go", "--build.bin", "/app/main" ]

  redis:
    image: redis:latest
    restart: always
    networks:
      - url-dev-network

  openresty:
    build:
      context: ./openresty
      dockerfile: Dockerfile
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./openresty/nginx.conf:/usr/local/openresty/nginx/conf/nginx.conf:ro
      - ./ssl:/usr/local/openresty/nginx/conf/ssl:ro
    depends_on:
      - envoy
    networks:
      - url-dev-network

  envoy:
    image: envoyproxy/envoy:v1.27.0
    volumes:
      - ./envoy_dev/envoy.yaml:/etc/envoy/envoy.yaml
    networks:
      - url-dev-network
    ports:
      - "10000:10000"

  postgres:
    image: postgres:latest
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
     - url-dev-network
    environment:
      - POSTGRES_PASSWORD=admin101
      - POSTGRES_USER=admin
      - POSTGRES_DB=analytics_db

volumes:
  mongodb-data:
  postgres-data:



networks:
  url-dev-network:
    driver: bridge
