services:
  mongodb:
    image: mongo:6.0
    ports:
      - "27017:27017"
    networks:
      - url-dev-network
    volumes:
      - mongodb-data:/data/db

  urls-service:
    build: urls_service
    command: ['uvicorn', 'app.main:app', '--host', '0.0.0.0', '--port', '80', '--reload', '--log-level', 'info']
    volumes:
      - ./urls_service:/app
    depends_on:
      - mongodb
    deploy:
      replicas: 3
    networks:
      - url-dev-network
    env_file:
      - urls_service/.env.local
    expose:
      - "80"

  redis:
    image: redis:latest
    restart: always
    networks:
      - url-dev-network

  nginx:
    image: nginx:latest
    container_name: nginx_proxy
    ports:
      - "8000:8000"
    volumes:
      - ./nginx_dev/nginx.conf:/etc/nginx_dev/nginx.conf:ro  # Mount custom NGINX config
    depends_on:
      - urls-service
    networks:
      - url-dev-network

  analytics-producer:
    deploy:
      replicas: 3
    build:
      dockerfile: producer.Dockerfile
      context: ./new_analytics_service
    depends_on:
      - kafka
    #  - postgres

    networks:
      - url-dev-network
    volumes:
      - ./new_analytics_service:/app
    env_file:
      - new_analytics_service/.env.local
    #command: ['/root/bin/air', '--build.cmd', 'go build -o main /app/cmd/producer/main.go', ]

  analytics-consumer:
    deploy:
      replicas: 3
    build:
      dockerfile: consumer.Dockerfile
      context: ./new_analytics_service
    depends_on:
      - kafka
      #- postgres
    networks:
      - url-dev-network
    env_file:
      - new_analytics_service/.env.local
    #command: ["/root/bin/air", "--build.cmd", "go build -o main ./cmd/consumer/main.go", ]


  #postgres:
  #  image: postgres:latest
  #  ports:
  #    - "5432:5432"
  #  volumes:
  #    - postgres-data:/var/lib/postgresql/data
  #    - ./postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
  #  networks:
  #   - url-dev-network
  #  environment:
  #    - POSTGRES_PASSWORD=admin101
  #    - POSTGRES_USER=admin
  #    - POSTGRES_DB=analytics_db

  zookeeper:
    image: 'bitnami/zookeeper:latest'
    container_name: zookeeper
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    ports:
      - '2181:2181'
    networks:
      - url-dev-network

  kafka:
    image: 'bitnami/kafka:latest'
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      # Set up a single internal listener only
      KAFKA_LISTENERS: INTERNAL://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL

    networks:
      - url-dev-network


volumes:
  mongodb-data:
  postgres-data:



networks:
  url-dev-network:
    driver: bridge
